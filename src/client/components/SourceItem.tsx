import { FC } from "hono/jsx";
import type { Source, Sources } from "../app/sources";

interface SourceItemProps {
  source: Source;
  onRemove: (id: string) => void;
  onAddNote: (id: string, note: string) => void;
}

export const SourceItem: FC<SourceItemProps> = ({
  source,
  onRemove,
  onAddNote,
}) => {
  const formatDate = (date: Date) => {
    return new Date(date).toLocaleTimeString();
  };

  const getSourceLabel = () => {
    if (source.source.type === "user") {
      return `Added via ${source.source.method}`;
    } else if (source.source.type === "research") {
      return `From search: "${source.source.query}"`;
    } else {
      return `Generated by agent`;
    }
  };

  const getContentPreview = () => {
    switch (source.content.type) {
      case "url":
        return source.content.url;
      case "snippet":
        return (
          source.content.text.substring(0, 100) +
          (source.content.text.length > 100 ? "..." : "")
        );
      case "search_result":
        return source.content.snippet;
    }
  };

  return (
    <div className="p-3 border border-gray-200 rounded-lg space-y-2">
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <div className="flex items-center gap-2">
            <span className="text-xs font-medium px-2 py-1 bg-gray-100 rounded">
              {source.type}
            </span>
            <span className="text-xs text-gray-500">
              {formatDate(source.createdAt)}
            </span>
          </div>
          {source.metadata.title && (
            <h4 className="font-medium text-gray-900 mt-1">
              {source.metadata.title}
            </h4>
          )}
        </div>
        <button
          onClick={() => onRemove(source.id)}
          className="text-gray-400 hover:text-gray-600"
        >
          Ã—
        </button>
      </div>

      <div className="text-sm text-gray-600">{getContentPreview()}</div>

      {source.metadata.summary && (
        <p className="text-sm text-gray-700">{source.metadata.summary}</p>
      )}

      <div className="text-xs text-gray-500">{getSourceLabel()}</div>

      {source.notes ? (
        <div className="text-sm bg-yellow-50 p-2 rounded">
          <span className="font-medium">Note:</span> {source.notes}
        </div>
      ) : (
        <button
          onClick={() => {
            const note = prompt("Add a note:");
            if (note) onAddNote(source.id, note);
          }}
          className="text-xs text-blue-600 hover:text-blue-800"
        >
          Add note
        </button>
      )}
    </div>
  );
};
