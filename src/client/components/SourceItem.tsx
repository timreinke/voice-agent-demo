import { FC } from "hono/jsx";
import type { Source } from "../app/sources";
import { Sources } from "../app/sources";

interface SourceItemProps {
  source: Source;
}

export const SourceItem: FC<SourceItemProps> = ({ source }) => {
  const formatDate = (date: Date) => {
    return new Date(date).toLocaleTimeString();
  };

  const getSourceLabel = () => {
    if (source.source.type === "user") {
      return `Added via ${source.source.method}`;
    } else if (source.source.type === "research") {
      return `From search: "${source.source.query}"`;
    } else {
      return `Generated by agent`;
    }
  };

  const getContentPreview = () => {
    switch (source.content.type) {
      case "url":
        return source.content.url;
      case "snippet":
        return (
          source.content.text.substring(0, 100) +
          (source.content.text.length > 100 ? "..." : "")
        );
      case "search_result":
        return source.content.snippet;
      case "research":
        if (source.status === "pending") {
          return "Research in progress...";
        } else if (source.status === "error") {
          return `Research failed: ${source.error || "Unknown error"}`;
        } else if (source.content.findings) {
          return source.content.findings.summary.substring(0, 150) + 
                 (source.content.findings.summary.length > 150 ? "..." : "");
        }
        return source.content.query;
    }
  };

  const getStatusIndicator = () => {
    if (source.status === "pending") {
      return (
        <span 
          className="inline-block w-2 h-2 bg-yellow-400 rounded-full animate-pulse" 
          title="Research in progress"
        />
      );
    } else if (source.status === "error") {
      return (
        <span 
          className="inline-block w-2 h-2 bg-red-500 rounded-full" 
          title={source.error || "Error occurred"}
        />
      );
    }
    return null;
  };

  return (
    <div className="p-4 bg-white border border-gray-200 rounded-xl space-y-2 hover:shadow-md transition-shadow cursor-pointer">
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <div className="flex items-center gap-2">
            <span className={`text-xs font-medium px-2.5 py-1 rounded-lg ${
              source.type === "url" 
                ? "bg-emerald-100 text-emerald-700" 
                : source.type === "snippet"
                ? "bg-blue-100 text-blue-700"
                : source.type === "research"
                ? "bg-purple-100 text-purple-700"
                : "bg-gray-100 text-gray-700"
            }`}>
              {source.type === "url" ? "🔗" : 
               source.type === "snippet" ? "📝" : 
               source.type === "research" ? "🔍" : "📋"} {source.type}
            </span>
            {getStatusIndicator()}
            <span className="text-xs text-gray-500">
              {formatDate(source.createdAt)}
            </span>
          </div>
          {source.metadata.title && (
            <h4 className="font-medium text-gray-900 mt-1">
              {source.metadata.title}
            </h4>
          )}
        </div>
        <button
          onClick={() => Sources.removeSource(source.id)}
          className="text-gray-400 hover:text-red-500 text-xl leading-none p-1 rounded-lg hover:bg-red-50 transition-colors"
        >
          ×
        </button>
      </div>

      <div className="text-sm text-gray-600">{getContentPreview()}</div>

      {source.metadata.summary && (
        <p className="text-sm text-gray-700">{source.metadata.summary}</p>
      )}

      <div className="text-xs text-gray-500">{getSourceLabel()}</div>

      {source.notes ? (
        <div className="text-sm bg-gradient-to-r from-yellow-50 to-amber-50 p-3 rounded-lg border border-yellow-200">
          <span className="font-medium text-amber-700">💡 Note:</span> {source.notes}
        </div>
      ) : (
        <button
          onClick={() => {
            const note = prompt("Add a note:");
            if (note) Sources.updateSource(source.id, { notes: note });
          }}
          className="text-xs text-indigo-600 hover:text-indigo-800 font-medium"
        >
          Add note
        </button>
      )}
    </div>
  );
};
